#!/bin/bash

# Automatic kernel makefile generation
# Jerry Cooperstein, coop@linuxfoundation.org, 2/2003 - 11/2009
# License: GPLv2

OBJS=""   # list of kernel modules (.o files)
K_S=""    # list of kernel modules (.c files)
U_S=""    # list of userland programs (.c files)
U_X=""    # list of userland programs (executables) 
T_S=""    # list of userland programs (.c files) that use pthreads
T_X=""    # list of userland programs (executables) that use pthreads
ALL=""    # list of all targets

CFLAGS_U_X="-O2 -Wall -pedantic"    # compile flags for user programs
CFLAGS_T_X=$CFLAGS_U_X" -pthread"   # compile flags for threaded user programs

# set the default kernel source to the running one; otherwise take from 
# first command line argument 

if [ "$KROOT" == "" ] ; then
    KROOT=/lib/modules/$(uname -r)/build
    [ ! -d "$KROOT" ] && KROOT=/usr/src/linux-$(uname -r)
fi

# abort if the source is not present

KMF=$KROOT/Makefile
KERNELSRC=$(grep "^KERNELSRC" $KMF | awk ' {print $3;}')

if [ "$KERNELSRC" != "" ] ; then 
    echo Primary Makefile is not in $KROOT, using $KERNELSRC
    KMF=$KERNELSRC/Makefile
fi

if [ ! -d "$KROOT" ] || [ ! -f "$KMF" ] ; then
    echo kernel source directory $KROOT does not exist or has no Makefile
    exit 1
fi

# additional flags?

if [ "$KINCS"	!= "" ] ; then
	CFLAGS_U_X="$CFLAGS_U_X -I$KROOT/include"
	CFLAGS_T_X="$CFLAGS_T_X -I$KROOT/include"
fi

# extract the VERSION info from the Makefile

KV=$(grep "^VERSION =" $KMF | awk ' {print $3;}')
KP=$(grep "^PATCHLEVEL =" $KMF | awk ' {print $3;}')
KS=$(grep "^SUBLEVEL =" $KMF | awk ' {print $3;}')
KE=$(grep "^EXTRAVERSION =" $KMF | awk ' {print $3;}')
KERNEL=$KV.$KP.$KS$KE

echo KERNEL=$KERNEL, KV=$KV KP=$KP KS=$KS KE=$KE

# check on the major release version

if [ $KP != 6 ] ; then
    echo KROOT=$KROOT is not 2.6, exiting
    exit 1
fi

# construct lists of kernel and user sources and targets

# skip empty directories
if [ "$(find . -maxdepth 1 -name "*.c")" == "" ] ; then 
    echo No need to make Makefile: no source code
    exit
fi

for names in *.c ; do 

# exclude files with NOMAKE or .mod.c files

 if [ "$(grep NOMAKE $names)" ] || [ "$(grep vermagic $names)" ] ; then
     echo "$names is being skipped, it is not a module or program"
     else
     if [ "$(grep \<linux\/module.h\> $names )" ] ; then
	 FILENAME_DOTO=$(basename $names .c).o
	 OBJS=$OBJS" $FILENAME_DOTO"
	 K_S=$K_S" $names"
     else
# is it  a pthread'ed program?
	 if [ "$(grep '\<pthread.h\>' $names)" ] ; then
	     FILENAME_EXE=$(basename $names .c)
	     T_X=$T_X" $FILENAME_EXE"
	     T_S=$T_S" $names"
	 else
	     U_X=$U_X" $(basename $names .c)"
	     U_S=$U_S" $names"
	 fi
     fi
 fi
done

CLEANSTUFF="$U_X $T_X"

# maybe there are no kernel modules

if [ "$OBJS" != "" ] ; then
    CLEANSTUFF="$CLEANSTUFF"" Module.symvers modules.order"
fi

# get ALL the targets

if [ "$U_X" != "" ] ; then ALL=$ALL" userprogs"; fi
if [ "$T_X" != "" ] ; then ALL=$ALL" threadprogs"; fi
if [ "$OBJS" != "" ] ; then ALL=$ALL"  modules" ; fi

# echo if you are curious :>

echo K_S=$K_S OBJS=$OBJS U_S=$U_S U_X=$U_X T_S=$T_S T_X=$T_X

#####################################################################################
# We're done preparing, lets build the makefile finally!

# get rid of the old Makefile, build a new one

rm -f Makefile

echo "### Automatic Makefile generation by 'genmake' script        ####" >>Makefile
echo "### Copyright, Jerry Cooperstein, coop@linuxfoundation.org 2/2003 - 11/2009 ####" >>Makefile
echo "### License: GPLv2 ###"                                              >>Makefile

if [ "$K_S" != "" ] ; then
    echo -e "\nobj-m += $OBJS" >> Makefile
    echo -e "\nexport KROOT=$KROOT" >> Makefile
    if [ "$ARCH" != "" ] ; then 
	echo -e "\nexport ARCH=$ARCH" >> Makefile
    fi
fi
echo -e "\nallofit: $ALL" >> Makefile

if [ "$K_S" != "" ] ; then
    echo "modules:" >> Makefile
    echo -e "\t@\$(MAKE) -C \$(KROOT) M=\$(PWD) modules" >> Makefile
    echo "modules_install:" >> Makefile
    echo -e "\t@\$(MAKE) -C \$(KROOT) M=\$(PWD) modules_install" >> Makefile
    echo "kernel_clean:" >> Makefile
    echo -e "\t@\$(MAKE) -C \$(KROOT) M=\$(PWD) clean" >> Makefile
fi

if [ "$U_X" != "" ] ; then 
    echo -e "\nuserprogs:" >> Makefile
    echo -e "\t@\$(MAKE) \\" >> Makefile
    echo -e "\t\tCFLAGS=\"$CFLAGS_U_X\" \\" >> Makefile
    if [ "$LDLIBS" != "" ] ; then
	echo -e "\t\tLDLIBS=\"$LDLIBS\" \\" >> Makefile
    fi
    if [ "$CPPFLAGS" != '' ] ; then
    echo -e "\t\tCPPFLAGS=\"$CPPFLAGS\" \\" >> Makefile
    fi
    echo -e "\t$U_X" >> Makefile 
fi

if [ "$T_X" != "" ] ; then 
    echo -e "\nthreadprogs:" >> Makefile
    echo -e "\t@\$(MAKE) \\" >> Makefile
    echo -e "\t\tCFLAGS=\"$CFLAGS_T_X\" \\" >> Makefile
    if [ "$LDLIBS" != "" ] ; then
	echo -e "\t\tLDLIBS=\"$LDLIBS\" \\" >> Makefile
    fi
    if [ "$CPPFLAGS" != '' ] ; then
	echo -e "\t\tCPPFLAGS=\"$CPPFLAGS\" \\" >> Makefile
    fi
    echo -e "\t$T_X" >> Makefile 
fi

if [ "$K_S" != "" ] ; then
    echo -e "\nclean: kernel_clean" >> Makefile
else
    echo -e "\nclean:" >> Makefile
fi
echo -e "\trm -rf $CLEANSTUFF" >> Makefile

exit

######################################################################################

